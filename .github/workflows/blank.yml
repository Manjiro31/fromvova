using System;
using System.Threading;

class Program
{
    static void Main()
    {
        bool exitProgram = false;
        while (!exitProgram)
        {
            int choice = ShowMenu();
            switch (choice)
            {
                case 1:
                    PlayGuessingGame();
                    break;
                case 2:
                    ShowAuthorInfo();
                    break;
                case 3:
                    SortArray();
                    break;
                case 4:
                    Playingtetris();
                    break;
                case 5:
                    exitProgram = ConfirmExit();
                    break;
                default:
                    Console.WriteLine("Некорректный выбор. Пожалуйста, попробуйте снова.");
                    break;
            }
        }
    }

    static int ShowMenu()
    {
        Console.WriteLine("\nВыберите нужный пункт меню:");
        Console.WriteLine("1. Отгадай ответ");
        Console.WriteLine("2. Об авторе");
        Console.WriteLine("3. Сортировка массива");
        Console.WriteLine("4. Игра Тетрис");
        Console.WriteLine("5. Выход");
        return GetIntInput("Введите номер пункта меню: ");
    }

    static void PlayGuessingGame()
    {
        double a = GetDoubleInput("Введите значение переменной A (больше 0): ", true);
        double b = GetDoubleInput("Введите значение переменной B (больше 0): ", true);
        double correctAnswer = CalculateFunction(a, b);
        GuessTheAnswer(correctAnswer);
    }

    static double GetDoubleInput(string message, bool greaterThanZero = false)
    {
        double value;
        do
        {
            Console.Write(message);
            while (!double.TryParse(Console.ReadLine(), out value))
            {
                Console.WriteLine("Введите корректное число.");
            }
        } while (greaterThanZero && value <= 0);
        return value;
    }

    static double CalculateFunction(double a, double b)
    {
        return Math.Round((Math.Pow(Math.Log(b), 2)) / (Math.Cos(a) - 1), 2);
    }

    static void GuessTheAnswer(double correctAnswer)
    {
        short attempts = 0;
        while (attempts < 3)
        {
            double userGuess = GetDoubleInput("Введите ваше предположение: ");
            if (Math.Round(userGuess, 2) == correctAnswer)
            {
                Console.WriteLine("Угадали!");
                return;
            }
            else
            {
                Console.WriteLine(attempts < 2 ? "Неверно, попробуйте еще раз." : $"Попытки закончились, правильный ответ: {correctAnswer}");
            }
            attempts++;
        }
    }

    static void ShowAuthorInfo()
    {
        Console.WriteLine("ФИО: Картеяв Глеб Владимирович");
        Console.WriteLine("Группа: 6106-090301D");
    }

    static void SortArray()
    {
        int n = GetArrayLength();
        int[] originalArray = CreateAndInitializeArray(n);
        Console.WriteLine("Исходный массив:");
        PrintArray(originalArray);
        int[] bubbleSortArray = CloneArray(originalArray);
        int[] insertionSortArray = CloneArray(originalArray);
        var bubbleSortTime = MeasureSortingTime(() => BubbleSort(bubbleSortArray));
        Console.WriteLine($"Время выполнения пузырьковой сортировки: {bubbleSortTime} мс");
        PrintArray(bubbleSortArray);
        var insertionSortTime = MeasureSortingTime(() => InsertionSort(insertionSortArray));
        Console.WriteLine($"Время выполнения сортировки вставками: {insertionSortTime} мс");
        PrintArray(insertionSortArray);
    }

    static void Playingtetris()
    {
        Console
.WriteLine("Начинаем игру Тетрис...");
        TetrisGame();
    }

    static void TetrisGame()
    {
        int boardWidth = 10;
        int boardHeight = 20;
        char, board = new charboardHeight, boardWidth;
        Random random = new Random();

        InitializeBoard(board);
        while (true)
        {
            ShowBoard(board);
            char piece = GetRandomPiece(random);
            int piecePosition = boardWidth / 2 - 1;

            if (!PlacePiece(board, piece, piecePosition, 0))
            {
                Console.WriteLine("Игра окончена!");
                break;
            }

            while (true)
            {
                if (Console.KeyAvailable)
                {
                    var key = Console.ReadKey(true).Key;
                    if (key == ConsoleKey.LeftArrow)
                        MovePiece(board, piece, ref piecePosition, -1);
                    else if (key == ConsoleKey.RightArrow)
                        MovePiece(board, piece, ref piecePosition, 1);
                    else if (key == ConsoleKey.DownArrow)
                        MovePiece(board, piece, ref piecePosition, 0);
                }

                if (!MovePiece(board, piece, ref piecePosition, 1))
                    break;

                Thread.Sleep(500);
            }
        }
    }

    static void InitializeBoard(char, board)
    {
        for (int i = 0; i < board.GetLength(0); i++)
            for (int j = 0; j < board.GetLength(1); j++)
                boardi, j = ' ';
    }

    static void ShowBoard(char, board)
    {
        Console.Clear();
        for (int i = 0; i < board.GetLength(0); i++)
        {
            for (int j = 0; j < board.GetLength(1); j++)
                Console.Write(boardi, j);
            Console.WriteLine();
        }
    }

    static char GetRandomPiece(Random random)
    {
        char pieces = { 'I', 'O', 'T', 'S', 'Z', 'J', 'L' };
        return piecesrandom.Next(pieces.Length);
    }

    static bool PlacePiece(char, board, char piece, int position, int row)
    {
        if (row >= board.GetLength(0) || position < 0 || position >= board.GetLength(1))
            return false;

        if (boardrow, position != ' ')
            return false;

        boardrow, position = piece;
        return true;
    }

    static bool MovePiece(char, char board, char piece, ref int position, int direction)
    {
        int newPosition = position + direction;
        if (CanMove(board, piece, newPosition, 0))
        {
            ClearPiece(board, piece, position);
            position = newPosition;
            DrawPiece(board, piece, position, 0);
            return true;
        }
        else if (direction == 1) // if moving down
        {
            if (CanMove(board, piece, position, 1))
            {
                ClearPiece(board, piece, position);
                DrawPiece(board, piece, position, 1);
                return true;
            }
            else
            {
                PlacePiece(board, piece, position, 0);
                CheckLines(board);
                return false;
            }
        }
        return false;
    }

    static bool CanMove(char, board, char piece, int position, int row)
    {
        if (row < 0 || position < 0 || position >= board.GetLength(1))
            return false;

        return boardrow, position == ' ';
    }

    static void ClearPiece(char, board, char piece, int position)
    {
        for (int i = 0; i < board.GetLength(0); i++)
            if (boardi, position == piece)
                boardi, position = ' ';
    }

    static void DrawPiece(char, board, char piece, int position, int row)
    {
        if (row < board.GetLength(0))
            boardrow, position = piece;
    }

    static void CheckLines(char, board)
    {
        for (int i = 0; i < board.GetLength(0); i++)
        {
            bool fullLine = true;
            for
(int j = 0; j < board.GetLength(1); j++)
            {
                if (board[i, j] == ' ')
                {
                    fullLine = false;
                    break;
                }
            }
            if (fullLine)
            {
                RemoveLine(board, i);
                i--; // Check the same line again after removal
            }
        }
    }

    static void RemoveLine(char[,] board, int line)
    {
        for (int i = line; i > 0; i--)
            for (int j = 0; j < board.GetLength(1); j++)
                board[i, j] = board[i - 1, j];

        for (int j = 0; j < board.GetLength(1); j++)
            board[0, j] = ' ';
    }

    static bool ConfirmExit()
    {
        Console.WriteLine("Чтобы выйти нажмите y, чтобы отменить n ");
        string choice = Console.ReadLine();
        return choice.ToLower() == "y";
    }

    static int GetArrayLength()
    {
        return GetIntInput("Введите длину массива (больше 0): ", true);
    }

    static int[] CreateAndInitializeArray(int length)
    {
        int[] array = new int[length];
        Random random = new Random();
        for (int i = 0; i < length; i++)
        {
            array[i] = random.Next(1, 100);
        }
        return array;
    }

    static int[] CloneArray(int[] sourceArray)
    {
        int[] newArray = new int[sourceArray.Length];
        Array.Copy(sourceArray, newArray, sourceArray.Length);
        return newArray;
    }

    static void PrintArray(int[] array)
    {
        if (array.Length > 10)
        {
            Console.WriteLine("Массивы не могут быть выведены на экран, так как длина массива больше 10.");
        }
        else
        {
            Console.WriteLine("Массив: " + string.Join(", ", array));
        }
    }

    static long MeasureSortingTime(Action sortMethod)
    {
        var stopwatch = System.Diagnostics.Stopwatch.StartNew();
        sortMethod();
        stopwatch.Stop();
        return stopwatch.ElapsedMilliseconds;
    }

    static void BubbleSort(int[] arr)
    {
        int n = arr.Length;
        for (int i = 0; i < n - 1; i++)
        {
            for (int j = 0; j < n - i - 1; j++)
            {
                if (arr[j] > arr[j + 1])
                {
                    int temp = arr[j];
                    arr[j] = arr[j + 1];
                    arr[j + 1] = temp;
                }
            }
        }
    }

    static void InsertionSort(int[] arr)
    {
        int n = arr.Length;
        for (int i = 1; i < n; i++)
        {
            int key = arr[i];
            int j = i - 1;
            while (j >= 0 && arr[j] > key)
            {
                arr[j + 1] = arr[j];
                j--;
            }
            arr[j + 1] = key;
        }
    }

    static int GetIntInput(string message, bool greaterThanZero = false)
    {
        int value;
        do
        {
            Console.Write(message);
            while (!int.TryParse(Console.ReadLine(), out value))
            {
                Console.WriteLine("Введите корректное целое число.");
            }
        } while (greaterThanZero && value <= 0);
        return value;
    }
}
